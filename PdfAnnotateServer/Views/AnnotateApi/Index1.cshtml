@model AnnotateIndexModel

<button type="button" id="AddLine" class="btn btn-success" data-line-Index="0" >Add Line</button>
<button type="button" id="save"> save</button>
<canvas style="width: 80vw; height: 100vh" id="canvas"></canvas>
<img id="myImage" style="display: none; width: 10vw;" src="@Url.Content($"~/Images/{Model.Path}" )" />

@*<img style="width: 50vw;" id="image" src="" />*@


@*
    all movements will be saved as percentages x = 0% left x = 100% right, y = 0% Top y = 100% bottom
    will convert values to inches inside server when pdf size is found

*@
@section Scripts{ 

<script src="@Url.Content("~/js/fabricF.js")"></script>
<script>
    //heres the plan
    //add lines to pdf they can be moved by either end of line by circles that appear or get darker on hover
    //when placed the postion of both ends is saved by x y percentage
    //hit save these values are send to server turned into proper unit and the pdf is stamped

    //1: button that adds line to page with circles on either side
    //2: when moving around save location of line and name
    //3: send line location to server
    //4: convert values to unit and send through service
    var AnnoLineList = []
    var ImageSize = {}

    var c = document.getElementById("canvas");
    fabric.Object.prototype.originX = fabric.Object.prototype.originY = 'center';

    var canF = this.__canvas = new fabric.Canvas('canvas', {
        width: c.clientWidth,
        height: c.clientHeight,
        selection: false
    });

    fabric.Image.fromURL("@Url.Content($"~/Images/{Model.Path}" )", function (oImg) {

        //scalels image to fit window and centers
        var hundredPercent = 1 / oImg.getScaledWidth()
        oImg.scale(hundredPercent * c.clientWidth)
        oImg.set({ left: oImg.getScaledWidth() / 2, top: oImg.getScaledHeight() / 2 });
        canF.add(oImg);

        //all cordinates are 0 - 1 based off percentages
        ImageSize["width"] = oImg.getScaledWidth()
        ImageSize["height"] = oImg.getScaledHeight()
        ImageSize["heightPercent"] = 1 / oImg.getScaledHeight()
        ImageSize["widthPercent"] = 1 / oImg.getScaledWidth()

    }, {
        selectable: false,
        evented: false,
    });

    $("#save").click((e) => {
        var formData = new FormData();
        var index = 0
        for (var intstuction of AnnoLineList) {
            for (var prop of Object.getOwnPropertyNames(intstuction)) {
                formData.append(`instructions[${index}].${prop}`, intstuction[prop]);
            }

            index++
        }
        $.ajax(
            {
                type: "Post",
                url: "@Url.Action(nameof(AnnotateApi.AnnotatePdfPercentCords), "AnnotateApi")",
                data: formData,
                processData: false,
                contentType: false,
                dataType: "text",
                success: function (data) {
                            }
            });
    })

    $("#AddLine").click((e) => {
        var $target = $(e.target)
        var annotateLineIndex = Number($target.attr("data-line-Index"))
        MakeLineAnnotation(annotateLineIndex)
        $target.attr("data-line-Index", annotateLineIndex + 1)
    })

    canF.on('object:moving', function (e) {
        var p = e.target;

        p.RightLine && p.RightLine.set({ 'x2': p.left, 'y2': p.top });
        p.LeftLine && p.LeftLine.set({ 'x1': p.left, 'y1': p.top });
        updateLineList(p.lineIndex, p)
        canF.renderAll();
    });

    function MakeLineAnnotation(index) {
        var x1 = 250
        var y1 = 250
        var x2 = 400
        var y2 = 250
        lineTop = makeLine([x1, y1, x2, y2])
        AnnoLineList.push({ MethodName: "Line", Unit: "percent", X1: x1 * ImageSize.widthPercent, Y1: y1 * ImageSize.heightPercent, X2: x2 * ImageSize.widthPercent, Y2: y2 * ImageSize.heightPercent })
        circleL = makeCircle(lineTop.get('x1'), lineTop.get('y1'), index, "LeftLine")
        circleR = makeCircle(lineTop.get('x2'), lineTop.get('y2'), index, "RightLine")
        canF.add(circleL, circleR);
        canF.add(lineTop);
    }

    function updateLineList(index, p ) {
        p.RightLine && assignRight()
        p.LeftLine && assignLeft()

        function assignRight() {
            AnnoLineList[index].Y2 = p.RightLine.y2 * ImageSize["heightPercent"]
            AnnoLineList[index].X2 = p.RightLine.x2 * ImageSize["widthPercent"]
        }

        function assignLeft() {
            AnnoLineList[index].Y1 = p.LeftLine.y1 * ImageSize["heightPercent"]
            AnnoLineList[index].X1 = p.LeftLine.x1 * ImageSize["widthPercent"]

        }
    }

    function makeLine(coords) {
        const Line = new fabric.Line(coords, {
            fill: 'black',
            stroke: 'black',
            strokeWidth: 1,
            selectable: false,
            evented: false,
            offsetX: 10,
            original2: newXY(),
            original1: newXY()
        });
        console.log(Line.original1)
        Line.original1.set({ x: Line.x1, y: Line.y1 })
        Line.original2.set({ x: Line.x2, y: Line.y2 })
        return Line
    }

    function makeCircle(left, top, lineIndex, name) {
        var radius = 12
        var c = new fabric.Circle({
            left: left,
            top: top ,
            OriTop: top,
            strokeWidth: 5,
            radius: radius,
            fill: '#69b5e8',
            opacity: 0.2,
            stroke: '#69b5e8',
            lockSkewing: true,
            original1: newXY(),
            slideCircle: true,
        });
        c.original1.set({ x: left, y: top })

        c.hasControls = c.hasBorders = false;

        c["lineIndex"] = lineIndex
        c[name] = lineTop;
        return c;
    }
    function newXY() {
        return {
            x: 0,
            y: 0,
            set(a) {
                if (a.x) this.x = a.x;
                if (a.y) this.y = a.y;
            }
        }
    }
</script>
}